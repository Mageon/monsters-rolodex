{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKA,UAAU,MAAMC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAG,kBAAaL,EAAMG,QAAQC,MAC7G,6BAAKJ,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHXC,EAAW,SAACR,GAMvB,OAJAS,QAAQC,IAAIV,GAKV,qBAAKC,UAAU,YAAf,SAEID,EAAMW,SAASC,KACb,SAACT,GAAD,OACE,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCZlBS,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEd,UAAU,SACVe,KAAK,OACLF,YAAaA,EACbG,SAAUF,MCuDDG,E,kDAzDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAG/C,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YAOZQ,EAAmBjB,EAASkB,QAChC,SAAA1B,GAAO,OACLA,EAAQG,KAAKwB,cAAcC,SAASX,EAAYU,kBAKpD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAc,SAAAiB,GACZ,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAezC,cAAC,EAAD,CAAUvB,SAAkCiB,W,GAnDlCO,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e872f6be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img className=\"cis\" src={`https://robohash.org/${props.monster.id}?set=set2`} alt={`Monster ${props.monster.id}`} />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const Cardlist = (props) => {\r\n  // props refers to Properties of the Cardlist element\r\n  console.log(props);\r\n  // console.log(props.children);\r\n  // props.children, refers to the elements between the tags of Cardlist element\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {\r\n        props.monsters.map(\r\n          (monster) => (            \r\n            <Card key={monster.id} monster={monster} />\r\n          )\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"text\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { Cardlist } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\n//function App() {\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    // the above line is equal as:\n    // const monsters = this.state.monsters; and\n    // const searchField = this.state.searchField;\n\n\n    // This function filter monsters list if searchField var exists in the monster name\n    const filteredMonsters = monsters.filter(\n      monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n      \n\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder=\"Search Monsters\" \n          handleChange={e => {\n            this.setState({searchField: e.target.value});\n          }\n        }/>\n        {/* <input \n          type='text' \n          placeholder='Search Monsters' \n          onChange={e => {\n            this.setState({searchField: e.target.value});\n            // this.setState({searchField: e.target.value}, () => console.log(this.state.searchField) );\n            // console.log(this.state.searchField);\n            // if we put the above line console log do not shows result after another action is performed\n            // but if we add it inside the setState function call as seen above il will work as intended.\n            }\n          }\n        /> */}\n        <Cardlist monsters={/*this.state.monsters*/ filteredMonsters} >\n        </Cardlist>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}